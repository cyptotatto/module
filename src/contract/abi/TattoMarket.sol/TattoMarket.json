[
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_role",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "_currencyControlAddress",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "_backAddress",
        "type": "address"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "TattoMarket_Already_Used_Hash",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "TattoMarket_Hash_Does_Not_Match",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "TattoMarket_Price_Is_Larger_Than_BalanceOf",
    "type": "error"
  },
  {
    "inputs": [],
    "name": "TattoMarket_Signer_Address_Does_Not_Match",
    "type": "error"
  },
  {
    "anonymous": false,
    "inputs": [],
    "name": "BuyLazyNFT",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [],
    "name": "BuyNFT",
    "type": "event"
  },
  {
    "inputs": [
      {
        "components": [
          {
            "internalType": "address",
            "name": "collectionAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "creatorAddress",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "ipfsHash",
            "type": "string"
          },
          {
            "internalType": "bytes32",
            "name": "mintHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "mintSignature",
            "type": "bytes"
          }
        ],
        "internalType": "struct TattoMarket.LazyNFTInfo",
        "name": "lazyNFTInfo",
        "type": "tuple"
      },
      {
        "components": [
          {
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "payHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "paySignature",
            "type": "bytes"
          }
        ],
        "internalType": "struct TattoMarket.BuyerInfo",
        "name": "buyerInfo",
        "type": "tuple"
      },
      {
        "components": [
          {
            "internalType": "uint256",
            "name": "random",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "tradeHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "tradeSignature",
            "type": "bytes"
          }
        ],
        "internalType": "struct TattoMarket.TradeValidateInfo",
        "name": "tradeValidateInfo",
        "type": "tuple"
      }
    ],
    "name": "buyLazyNFT",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "components": [
          {
            "internalType": "address",
            "name": "collectionAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "holderAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "internalType": "struct TattoMarket.NFTInfo",
        "name": "nftInfo",
        "type": "tuple"
      },
      {
        "components": [
          {
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "payHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "paySignature",
            "type": "bytes"
          }
        ],
        "internalType": "struct TattoMarket.BuyerInfo",
        "name": "buyerInfo",
        "type": "tuple"
      },
      {
        "components": [
          {
            "internalType": "uint256",
            "name": "random",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "tradeHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "tradeSignature",
            "type": "bytes"
          }
        ],
        "internalType": "struct TattoMarket.TradeValidateInfo",
        "name": "tradeValidateInfo",
        "type": "tuple"
      }
    ],
    "name": "buyNFT",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "protocolFee",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
]
